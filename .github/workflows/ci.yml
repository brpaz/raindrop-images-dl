name: CI
on:
  workflow_dispatch:
  push:
    branches:
      - main
  pull_request:
  release:
    types:
      - published

env:
  GO_VERSION: 1.22
  GOTESTSUM_VERSION: 1.11.0
  GOLANGCI_LINT_VERSION: v1.60.1
  CI: true
  IMAGE_NAME: "ghcr.io/${{ github.repository}}"
  TEST_IMAGE_TAG: "ghcr.io/${{ github.repository}}:${{ github.sha }}"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  checks: write
  packages: write

jobs:
  lint-go:
    name: Lint Go Code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: false # Conflicts with GolangCI, if enabled

      - name: Lint Go Code
        uses: golangci/golangci-lint-action@v6
        with:
          version: ${{ env.GOLANGCI_LINT_VERSION }}
          only-new-issues: true

  lint-docker:
    name: Lint Dockerfile
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Lint Dockerfile
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile
          failure-threshold: error

  test:
    name: Test
    needs: [lint-go, lint-docker]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Setup gotestsum
        uses: autero1/action-gotestsum@v2.0.0
        with:
          gotestsum_version: ${{ env.GOTESTSUM_VERSION }}

      - name: Run tests
        run: |
          gotestsum --junitfile reports/unit-tests.xml --jsonfile reports/unit-tests-results.json -- -race -covermode=atomic -coverprofile=cover.txt ./internal/... ./cmd/...

      - name: Generate test report
        uses: dorny/test-reporter@v1
        if: ${{ !cancelled() }}
        with:
            name: Unit Tests Report
            path: 'reports/*.xml'
            reporter: jest-junit

      - name: Upload test report artifact
        uses: actions/upload-artifact@v4
        if: ${{ !cancelled() }}
        with:
          name: unit-test-report
          path: reports

      - name: Upload code coverage report to Codecov
        if: ${{ !cancelled() }}
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: cover.txt

      - name: Upload test results to Codecov
        if: ${{ !cancelled() }}
        uses: codecov/test-results-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./reports/unit-tests.xml

  build-binaries:
    name: Build Binaries
    needs: [test]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'

      - name: Run goreleaser (snapshot)
        uses: goreleaser/goreleaser-action@v5
        if: github.event_name != 'release'
        with:
          version: ${{ env.GORELEASER_VERSION }}
          args: release --snapshot --skip-publish --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Run goreleaser (release)
        uses: goreleaser/goreleaser-action@v5
        if: github.event_name == 'release'
        with:
          version: ${{ env.GORELEASER_VERSION }}
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload release artifact
        uses: actions/upload-artifact@v4
        if: github.event_name != 'release'
        with:
          name: snapshot-artifact
          path: dist/*
          retention-days: 3

  build-docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [test]
    outputs:
      image_digest: ${{ steps.dockerbuild.outputs.digest }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Setup gotestsum
        uses: autero1/action-gotestsum@v1.0.0
        with:
          gotestsum_version: ${{ env.GOTESTSUM_VERSION }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Build and push Docker image
        id: dockerbuild
        uses: docker/build-push-action@v6
        with:
          context: .
          push: false
          load: true
          tags: ${{ env.TEST_IMAGE_TAG }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
            GIT_COMMIT=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}

      - name: Login to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Tag and push final image
        if: github.event_name != 'pull_request'
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          build-args: |
            BUILDTIME=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
            REVISION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}
